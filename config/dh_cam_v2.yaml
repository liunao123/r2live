%YAML:1.0

imu_topic: "/livox/imu"
image_topic: "/camera/image_color"
output_path: "/home/map"

#camera calibration 
model_type: PINHOLE
camera_name: camera

image_width: 640
image_height: 512

distortion_parameters:
    k1: -0.0493838
    k2: -0.0601031
    p1: -0.0015458547
    p2: 0.0000830967
    k3: 0.551411

projection_parameters:
    fx: 433.5
    fy: 433.3
    cx: 323.5
    cy: 253.0


# Extrinsic parameter between IMU and Camera.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
estimate_extrinsic: 0    # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # indoor: online extrinsic calibrate
   # data: [0.0461723 , -0.0212037 , 0.998708,
   #        -0.998861 , -0.0129892 , 0.0459036,
   #        0.0119991 , -0.999691 , -0.0217793]

# TODO 保留 6位小数即可，再多就会报错
   # outdoor:  online extrinsic calibrate 
   # data: [ -0.0071588, -0.0045385, 0.9999641,
   #        -0.9999744, -0.0000722, -0.0076562,
   #        0.0001047,  -0.9999897, -0.0045378]

   data: [-0.023286 , -0.0421676  , 0.998839,
          -0.999443 , -0.0228807 , -0.024266,
          0.0238774 , -0.998848 , -0.0416111]

#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   # data: [0.1, 0.12, 0.12]
   # data: [0.22 , -0.06 , 0.11]
   data: [0.1, 0.15, 0.12] # define 


#feature traker paprameters
max_cnt: 150           # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 5                 # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0 #1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8  # max solver itrations, to guarantee real time
keyframe_parallax: 10  # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 7.7565195969e-03 #2.0558110444478399e-02          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 8.8885849233e-04 #2.8851885453467061e-03         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 2.4758342200e-04 #3.8550325711409205e-04         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 6.0901082399e-06 #3.0639709624135159e-05      # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.79484       # gravity magnitude


#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1             # useful in real-time and large project
pose_graph_save_path: "/home/map/pose_graph_result/" # save and load path

#unsynchronization parameters
estimate_td: 0                        # online estimate time offset between camera and imu
td: -0.02                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.2      # size of camera marker in RVIZ



